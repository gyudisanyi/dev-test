Részfeladatok címe után becsült idő.
##> napló, lesznek napló-commitok. Végén tényleges idő.

0. Mindent telepítek és először a frontenden át barátkozom a környezettel. - tipp: 1 óra
    ## front> node downgrade
    ## back>  node-gyp build error hegyek. Package.json alapján soronkénti próbálkozások.
                grpc/proto-loader build hal meg húsz perc agónia után.
                error C:\Users\user\Desktop\Automizy\dev-test\backend\node_modules\grpc: Command failed.
                Exit code: 1
                Command: node-pre-gyp install --fallback-to-build --library=static_library
                Arguments:
                Directory: C:\Users\user\Desktop\Automizy\dev-test\backend\node_modules\grpc
                Output: (...)

                @grpc/grpc-js telepítve helyette, lefut, importokat updateltem, eddig működik.
    ## db>    OK
    ## μsrv>  bindAsync() bind helyett, callback megadása.

  lett: 3 óra.

1. Megértem a Student modul működését - 1.5 óra
  1.1 Feladatkiírás böngészése
  1.2 Rest vizsgálata
  1.3 gRPC vizsgálata
  1.4 microservice-ek vizsgálata

lett: fél óra - telepítés közben már gusztáltam.

2. A Student modul és a dokumentáció alapján elkészítem a Project modult. - tipp: 2 óra
  2.1 Postman hívások
  2.2 REST
  2.3 gRPC
  2.4 microservices
  2.5 ORM

lett: 2 óra, nemigen volt elakadás, de a db "project.description" és a több más helyen szereplő "desc" eltérést egyelőre nem sikerült kiiktatni
      - SELECT AS-szerűen, de hol? Ezzel elment egy óra, irány a front, pedig okoz ám bugokat.

3. Frontend elkészítése (másolás)
  3.1 A feladatkiírással ellentétben a Project oldal nincs kész, a Student alapján készítem el. - tipp: 1 óra
    ## Ez simán sokkal hamarabb kész lett, aztán debugoltam a backet.
  
4. Management modul backend - tipp: 3 óra, mert lassulok, gyors haladásra és banális elakadásokra számítok.
  4.1 Postman hívásokkal kezdem, hogy átgondoljam és formálisan felvázoljam a funkcionalitást. - tipp: egy óra
  4.2 REST
  4.3 gRPC
  4.4 microservice, ORM

  ## A fentiek működnek (összesen volt eddig egy óra), készen állnak a logika fogadására, eddig fért egy munkanapba.

  ****

  ## Másnap 13:30 - jöjjön az a logika! tipp: egy óra.
  ## Management tábla: több student_id és több project_id,
  ## Döntés: Backenden JSON.stringify készít Stringet egy Arrayből (Setből), így tároljuk, vissza Parse. Ez izometrikus.
      - Átdöntés: "In proto3, repeated fields of scalar numeric types use packed encoding by default."
        Azaz arrayt fogad, "1,2,3" formátumban stringként tárolja és úgy is adja vissza (nincs array Type).
        Tehát Fronton parse-olunk belőle Arrayt.
  
  lett: 45 perc. De a logika csak egy kis validation meg ezek a tárolási kutatások voltak.

5. Management modul frontend - tipp: 2 óra
  5.1 Elképzelés: management list lekérdezést student és project list lekérdezések követik,
      így a managementekben tárolt ID-khez neveket tudunk társítani, ezek jelennek meg
      MVP hangulatban checkbox listákon.

  lett: 2.5 óra.

6. Üzemeltetés (to be continued)

## helyett javítás:
4.4 many to many táblát definiálok sequelize-ban a managementeknek. - tipp: ?
    ## tippet írni nem mentem, de több lett. Két óra alatt nyomon vagyok :)
    ## ...és további három óra alatt megzaboláztam.
    ## ...és még egy óra volt, mire egy fura bugot (újabban létrehozott studentekkel, projektekkel nem tud mit kezdeni) kiirtottam,
          sync({force: true}) a barátom lett, sequelizet kénytelen voltam jobban megismerni, elnevezések, konzolböngészés,
          gyakorlatilag ugyanoda jutottam, ahol voltam, de a funkciósorrendek megfelelők. $ cd frontin

5.1 Az előző javítás folyományaképpen a Management modul frontendjét átalakítom. Tipp: 1 óra
      Elképzelés: két fül lesz: Manage students és Manage projects - a megfelelőt listázza és az asszociációk transferrel.
      De: a feladatkiírás egy fület kér. Akkor ott lesz egy students/projects radio az "add new" gomb helyén.


